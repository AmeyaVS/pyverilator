name: TestVerilatorDev

on:
  push:
    branches:
    - master
  # Schedule Build Every Day
  schedule:
  - cron: "30 5 * * *"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install build pre-requisites
      run: |
        sudo apt update
        sudo apt install gcc-9 gcc-10
        sudo apt-get install git help2man perl python3 make autoconf g++ flex bison ccache
        sudo apt-get install numactl perl-doc # libgoogle-perftools-dev 
        sudo apt-get install libfl2  # Ubuntu only (ignore if gives error)
        sudo apt-get install libfl-dev  # Ubuntu only (ignore if gives error)
        # sudo apt-get install zlibc zlib1g zlib1g-dev  # Ubuntu only (ignore if gives error)
    - name: Install verilator from github
      run: |
        git clone https://github.com/verilator/verilator

        # Every time you need to build:
        # unsetenv VERILATOR_ROOT  # For csh; ignore error if on bash
        unset VERILATOR_ROOT  # For bash
        cd verilator
        git pull         # Make sure git repository is up-to-date
        git tag          # See what versions exist
        git checkout master      # Use development branch (e.g. recent bug fixes)
        #git checkout stable      # Use most recent stable release
        #git checkout v{version}  # Switch to specified release version
        
        autoconf         # Create ./configure script
        ./configure      # Configure and create Makefile
        make -j `nproc`  # Build Verilator itself (if error, try just 'make')
        sudo make install

        export VERILATOR_ROOT=`pwd`
        cd ..
    - name: check verilator version
      run: | 
        verilator --version
    - name: check gcc version
      run: | 
        gcc --version
    - name: update pip
      run: |
        pip install --upgrade pip
        if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
    - name: install pyverilator
      run: |
        python -m pip install -e ./
    - name: test
      run: |
        cd ./pyverilator/tests
        pytest --cov --cov-report=lcov
    - name: Coveralls GitHub Action
      # You may pin to the exact commit or the version.
      # uses: coverallsapp/github-action@3dfc5567390f6fa9267c0ee9c251e4c8c3f18949
      uses: coverallsapp/github-action@v2.2.3
      with:
        # Put secrets.GITHUB_TOKEN here
        github-token: ${{ github.token }} # optional, default is ${{ github.token }}
        # Path to lcov file [DEPRECATED]
        path-to-lcov: # optional
        # Coverage file
        file: # optional
        # Space-separated list of coverage files
        files: # optional
        # Force coverage format, supported formats: lcov, simplecov, cobertura, jacoco, gcov, golang, python
        format: # optional
        # Job flag name, e.g. "Unit", "Functional", or "Integration". Will be shown in the Coveralls UI.
        flag-name: # optional
        # Set to true if you are running parallel jobs, then use "parallel-finished: true" for the last action.
        parallel: # optional
        # Set to true for the last action when using "parallel: true".
        parallel-finished: # optional
        # Comma separated flags used to carryforward results from previous builds if some of the parallel jobs are missing.
        carryforward: # optional
        # Coveralls Enterprise server (more info: https://enterprise.coveralls.io)
        coveralls-endpoint: # optional, default is https://coveralls.io
        # Don't fail when coverage report file is empty or contains no data
        allow-empty: # optional
        # The root folder of the project that originally ran the tests
        base-path: # optional
        # Override the branch name
        git-branch: # optional
        # Override the commit sha
        git-commit: # optional
        # Branch name to use as the base for coverage results
        compare-ref: # optional
        # Commit SHA to use as the base for coverage results
        compare-sha: # optional
        # Enable debug output
        debug: # optional
        # Show execution time of parsing and reporting
        measure: # optional
        # Whether to fail (exit code 1) on any issues while uploading the coverage
        fail-on-error: # optional, default is true
